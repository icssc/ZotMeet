/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/rest/apExams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve AP Exam names
         * @description Get a mapping from AP exam names as they appear in the UCI Catalogue to their official names as given by College Board
         */
        get: operations["apExams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve term calendar
         * @description Retrieves key dates for the provided term.
         */
        get: operations["calendarTerm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/calendar/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all calendars
         * @description Retrieves all data for all terms that are currently available.
         */
        get: operations["allCalendarTerms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/courses/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve courses with IDs
         * @description Retrieves courses with the IDs provided
         */
        get: operations["batchCourses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/courses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a course
         * @description Retrieves a course by its ID.
         */
        get: operations["courseById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter courses
         * @description Retrieves courses matching the given filters.
         */
        get: operations["coursesByFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/coursesCursor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter courses with cursor pagination
         * @description Retrieves courses matching the given filters with cursor-based pagination.
         */
        get: operations["coursesByCursor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/enrollmentHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter enrollment history
         * @description Retrieves historical enrollment data for the given parameters. Granular history arrays only available for recent terms.
         */
        get: operations["enrollmentHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/grades/raw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter grades
         * @description Retrieves raw grades data for the given parameters.
         */
        get: operations["rawGrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/grades/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter grade options
         * @description Retrieves a set of further possible filters for the given parameters.
         */
        get: operations["gradesOptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/grades/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve grade aggregate
         * @description Retrieves grades aggregated by section and the set of sections that are included in this aggregation.
         */
        get: operations["aggregateGrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/grades/aggregateByCourse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve grade aggregate by course
         * @description Retrieves grades aggregated by course and the set of courses that are included in this aggregation.
         */
        get: operations["aggregateGradesByCourse"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/grades/aggregateByOffering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve grade aggregate by offering
         * @description Retrieves grades aggregated by offering, which is a course and the instructor who taught it, and the set of courses that are included in this aggregation.
         */
        get: operations["aggregateGradesByOffering"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/instructors/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve instructors with UCINetIDs
         * @description Retrieves instructors with the UCINetIDs provided.
         */
        get: operations["batchInstructors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/instructors/{ucinetid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a instructor
         * @description Retrieves an instructor by their UCInetID.
         */
        get: operations["instructorById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/instructors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter instructors
         * @description Retrieves instructors matching the given filters.
         */
        get: operations["instructorsByFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/instructorsCursor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter instructors with cursor pagination
         * @description Retrieves instructors matching the given filters with cursor-based pagination.
         */
        get: operations["instructorsByCursor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping
         * @description An endpoint for testing your connectivity to the REST API. This endpoint is never cached, so you can also use it to check your remaining request quota.
         */
        get: operations["ping"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/programs/majors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve majors
         * @description List all available majors in UCI's current catalogue.
         */
        get: operations["getMajors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/programs/minors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve minors
         * @description List all available majors in UCI's current catalogue.
         */
        get: operations["getMinors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/programs/specializations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve specializations
         * @description List all available majors in UCI's current catalogue.
         */
        get: operations["getSpecializations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/programs/major": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve major requirements
         * @description Retrieve course requirements for a major in UCI's current catalogue. Note that these are the requirements for the major itself; if this major has specializations, then one is mandatory and its requirements apply as well.
         */
        get: operations["majorRequirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/programs/minor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve minor requirements
         * @description Retrieve course requirements for a minor in UCI's current catalogue.
         */
        get: operations["minorRequirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/programs/specialization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve specialization requirements
         * @description Retrieve course requirements for a specialization in UCI's current catalogue.
         */
        get: operations["specializationRequirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/programs/ugradRequirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve undergraduate requirements
         * @description Retrieve requirements external to, but required for, for all undergraduate degrees
         */
        get: operations["ugradRequirements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve search results
         * @description Retrieves course/instructor results for the given search query.
         */
        get: operations["search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/websoc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query WebSoc
         * @description Retrieves WebSoc data satisfying the given parameters.
         */
        get: operations["websoc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/websoc/terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available WebSoc terms
         * @description Retrieve all terms currently available on WebSoc.
         */
        get: operations["websocTerms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/week": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve current week
         * @description Retrieves week data for the provided date, or today if one is not provided.
         */
        get: operations["week"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/studyRooms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a study room
         * @description Retrieves a study room by its ID.
         */
        get: operations["studyRoomById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/studyRooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve study rooms
         * @description Retrieves study rooms matching the given filters. If no filters are provided, all rooms are returned.
         */
        get: operations["studyRoomsByFilters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/rest/larc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query LARC sections
         * @description Retrieves LARC sections data matching the given filters.
         */
        get: operations["larc"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        coursesGrantedTree:
            | {
                  /** @description All of these entries are granted */
                  AND: unknown[];
              }
            | {
                  /** @description Any one of these entries is granted */
                  OR: components["schemas"]["coursesGrantedTree"][];
              };
        prereq:
            | {
                  /** @enum {string} */
                  prereqType: "course";
                  /** @enum {boolean} */
                  coreq: false;
                  courseId: string;
                  minGrade?: string;
              }
            | {
                  /** @enum {string} */
                  prereqType: "course";
                  /** @enum {boolean} */
                  coreq: true;
                  courseId: string;
              }
            | {
                  /** @enum {string} */
                  prereqType: "exam";
                  examName: string;
                  minGrade?: string;
              };
        prereqTree: {
            /** @description All of these prerequisites must have been fulfilled before this course can be taken. */
            AND?: (
                | components["schemas"]["prereq"]
                | components["schemas"]["prereqTree"]
            )[];
            /** @description At least one of these prerequisites must have been fulfilled before this course can be taken. */
            OR?: (
                | components["schemas"]["prereq"]
                | components["schemas"]["prereqTree"]
            )[];
            /** @description None of these prerequisites must have been fulfilled before this course can be taken. */
            NOT?: (
                | components["schemas"]["prereq"]
                | components["schemas"]["prereqTree"]
            )[];
        };
        programRequirement:
            | {
                  /** @description Human description of this requirement */
                  label: string;
                  /** @enum {string} */
                  requirementType: "Course";
                  /** @description The number of courses from this set demanded by this requirement. */
                  courseCount: number;
                  /** @description The courses permissible for fulfilling this requirement. */
                  courses: string[];
              }
            | {
                  /** @description Human description of this requirement */
                  label: string;
                  /** @enum {string} */
                  requirementType: "Unit";
                  /** @description The number of units needed for this requirement. */
                  unitCount: number;
                  /** @description The courses permissible for fulfilling this requirement. */
                  courses: string[];
              }
            | {
                  /** @description Human description of this requirement */
                  label: string;
                  /** @enum {string} */
                  requirementType: "Group";
                  /** @description The number of sub-requirements which must be met. */
                  requirementCount: number;
                  /** @description The collection of sub-requirements permissible for fulfilling this requirement. */
                  requirements: components["schemas"]["programRequirement"][];
              }
            | {
                  /** @description Human description of this requirement */
                  label: string;
                  /** @enum {string} */
                  requirementType: "Marker";
              };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    apExams: {
        parameters: {
            query?: {
                fullName?: string;
                catalogueName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description The full name of this AP Exam
                             * @example AP Microeconomics
                             */
                            fullName: string;
                            /**
                             * @description The name given to this AP Exam in the UCI Catalogue, if the UCI Catalogue names this exam
                             * @example AP ECONOMICS:MICRO
                             */
                            catalogueName: string | unknown | unknown;
                            /** @description The reward objects for various scores on this exam */
                            rewards: {
                                /** @description The scores on the AP Exam which are eligible for this reward */
                                acceptableScores: number[];
                                /** @description The number of units granted as part of this reward */
                                unitsGranted: number;
                                /** @description The number of units granted as generic elective credit (but not from any course) for this reward */
                                electiveUnitsGranted: number;
                                /** @description GE categories granted directly by this reward and not through any course */
                                geCategories: (
                                    | "GE-1A"
                                    | "GE-1B"
                                    | "GE-2"
                                    | "GE-3"
                                    | "GE-4"
                                    | "GE-5A"
                                    | "GE-5B"
                                    | "GE-6"
                                    | "GE-7"
                                    | "GE-8"
                                )[];
                                /** @description The tree describing course credit granted by this reward */
                                coursesGranted:
                                    | {
                                          /** @description All of these entries are granted */
                                          AND: unknown[];
                                      }
                                    | {
                                          /** @description Any one of these entries is granted */
                                          OR: components["schemas"]["coursesGrantedTree"][];
                                      };
                            }[];
                        }[];
                    };
                };
            };
            /** @description AP Exam mapping not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    calendarTerm: {
        parameters: {
            query: {
                year?: string;
                quarter:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example 2024 */
                            year: string;
                            /**
                             * @example Fall
                             * @enum {string}
                             */
                            quarter:
                                | "Fall"
                                | "Winter"
                                | "Spring"
                                | "Summer1"
                                | "Summer10wk"
                                | "Summer2";
                            /** @example 2024-09-26 */
                            instructionStart: string;
                            /** @example 2024-12-06 */
                            instructionEnd: string;
                            /** @example 2024-12-07 */
                            finalsStart: string;
                            /** @example 2024-12-13 */
                            finalsEnd: string;
                            /** @example 2024-05-04 */
                            socAvailable: string;
                        };
                    };
                };
            };
            /** @description Term not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    allCalendarTerms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example 2024 */
                            year: string;
                            /**
                             * @example Fall
                             * @enum {string}
                             */
                            quarter:
                                | "Fall"
                                | "Winter"
                                | "Spring"
                                | "Summer1"
                                | "Summer10wk"
                                | "Summer2";
                            /** @example 2024-09-26 */
                            instructionStart: string;
                            /** @example 2024-12-06 */
                            instructionEnd: string;
                            /** @example 2024-12-07 */
                            finalsStart: string;
                            /** @example 2024-12-13 */
                            finalsEnd: string;
                            /** @example 2024-05-04 */
                            socAvailable: string;
                        }[];
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    batchCourses: {
        parameters: {
            query: {
                ids: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example COMPSCI161 */
                            id: string;
                            /** @example COMPSCI */
                            department: string;
                            /** @example 161 */
                            courseNumber: string;
                            /** @example 161 */
                            courseNumeric: number;
                            /** @example Donald Bren School of Information and Computer Sciences */
                            school: string;
                            /** @example Design and Analysis of Algorithms */
                            title: string;
                            /**
                             * @example Upper Division (100-199)
                             * @enum {string}
                             */
                            courseLevel:
                                | "Lower Division (1-99)"
                                | "Upper Division (100-199)"
                                | "Graduate/Professional Only (200+)";
                            /** @example 4 */
                            minUnits: number;
                            /** @example 4 */
                            maxUnits: number;
                            description: string;
                            /** @example Computer Science */
                            departmentName: string;
                            instructors: {
                                /** @example mikes */
                                ucinetid: string;
                                /** @example Michael Shindler */
                                name: string;
                                /** @example Associate Professor of Teaching */
                                title: string;
                                /** @example mikes@uci.edu */
                                email: string | "";
                                /** @example Computer Science */
                                department: string;
                                /** @example [
                                 *       "SHINDLER, M."
                                 *     ] */
                                shortenedNames: string[];
                            }[];
                            prerequisiteTree: {
                                /** @description All of these prerequisites must have been fulfilled before this course can be taken. */
                                AND?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                                /** @description At least one of these prerequisites must have been fulfilled before this course can be taken. */
                                OR?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                                /** @description None of these prerequisites must have been fulfilled before this course can be taken. */
                                NOT?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                            };
                            prerequisiteText: string;
                            prerequisites: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                            }[];
                            dependencies: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                            }[];
                            repeatability: string;
                            gradingOption: string;
                            concurrent: string;
                            sameAs: string;
                            restriction: string;
                            overlap: string;
                            corequisites: string;
                            geList: (
                                | "GE Ia: Lower Division Writing"
                                | "GE Ib: Upper Division Writing"
                                | "GE II: Science and Technology"
                                | "GE III: Social & Behavioral Sciences"
                                | "GE IV: Arts and Humanities"
                                | "GE Va: Quantitative Literacy"
                                | "GE Vb: Formal Reasoning"
                                | "GE VI: Language Other Than English"
                                | "GE VII: Multicultural Studies"
                                | "GE VIII: International/Global Issues"
                            )[];
                            geText: string;
                            terms: string[];
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    courseById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example COMPSCI161 */
                            id: string;
                            /** @example COMPSCI */
                            department: string;
                            /** @example 161 */
                            courseNumber: string;
                            /** @example 161 */
                            courseNumeric: number;
                            /** @example Donald Bren School of Information and Computer Sciences */
                            school: string;
                            /** @example Design and Analysis of Algorithms */
                            title: string;
                            /**
                             * @example Upper Division (100-199)
                             * @enum {string}
                             */
                            courseLevel:
                                | "Lower Division (1-99)"
                                | "Upper Division (100-199)"
                                | "Graduate/Professional Only (200+)";
                            /** @example 4 */
                            minUnits: number;
                            /** @example 4 */
                            maxUnits: number;
                            description: string;
                            /** @example Computer Science */
                            departmentName: string;
                            instructors: {
                                /** @example mikes */
                                ucinetid: string;
                                /** @example Michael Shindler */
                                name: string;
                                /** @example Associate Professor of Teaching */
                                title: string;
                                /** @example mikes@uci.edu */
                                email: string | "";
                                /** @example Computer Science */
                                department: string;
                                /** @example [
                                 *       "SHINDLER, M."
                                 *     ] */
                                shortenedNames: string[];
                            }[];
                            prerequisiteTree: {
                                /** @description All of these prerequisites must have been fulfilled before this course can be taken. */
                                AND?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                                /** @description At least one of these prerequisites must have been fulfilled before this course can be taken. */
                                OR?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                                /** @description None of these prerequisites must have been fulfilled before this course can be taken. */
                                NOT?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                            };
                            prerequisiteText: string;
                            prerequisites: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                            }[];
                            dependencies: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                            }[];
                            repeatability: string;
                            gradingOption: string;
                            concurrent: string;
                            sameAs: string;
                            restriction: string;
                            overlap: string;
                            corequisites: string;
                            geList: (
                                | "GE Ia: Lower Division Writing"
                                | "GE Ib: Upper Division Writing"
                                | "GE II: Science and Technology"
                                | "GE III: Social & Behavioral Sciences"
                                | "GE IV: Arts and Humanities"
                                | "GE Va: Quantitative Literacy"
                                | "GE Vb: Formal Reasoning"
                                | "GE VI: Language Other Than English"
                                | "GE VII: Multicultural Studies"
                                | "GE VIII: International/Global Issues"
                            )[];
                            geText: string;
                            terms: string[];
                        };
                    };
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    coursesByFilters: {
        parameters: {
            query?: {
                department?: string;
                courseNumber?: string;
                courseNumeric?: number | null;
                titleContains?: string;
                courseLevel?: "LowerDiv" | "UpperDiv" | "Graduate";
                minUnits?: number | null;
                maxUnits?: number | null;
                descriptionContains?: string;
                geCategory?:
                    | "GE-1A"
                    | "GE-1B"
                    | "GE-2"
                    | "GE-3"
                    | "GE-4"
                    | "GE-5A"
                    | "GE-5B"
                    | "GE-6"
                    | "GE-7"
                    | "GE-8";
                take?: number | null;
                skip?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example COMPSCI161 */
                            id: string;
                            /** @example COMPSCI */
                            department: string;
                            /** @example 161 */
                            courseNumber: string;
                            /** @example 161 */
                            courseNumeric: number;
                            /** @example Donald Bren School of Information and Computer Sciences */
                            school: string;
                            /** @example Design and Analysis of Algorithms */
                            title: string;
                            /**
                             * @example Upper Division (100-199)
                             * @enum {string}
                             */
                            courseLevel:
                                | "Lower Division (1-99)"
                                | "Upper Division (100-199)"
                                | "Graduate/Professional Only (200+)";
                            /** @example 4 */
                            minUnits: number;
                            /** @example 4 */
                            maxUnits: number;
                            description: string;
                            /** @example Computer Science */
                            departmentName: string;
                            instructors: {
                                /** @example mikes */
                                ucinetid: string;
                                /** @example Michael Shindler */
                                name: string;
                                /** @example Associate Professor of Teaching */
                                title: string;
                                /** @example mikes@uci.edu */
                                email: string | "";
                                /** @example Computer Science */
                                department: string;
                                /** @example [
                                 *       "SHINDLER, M."
                                 *     ] */
                                shortenedNames: string[];
                            }[];
                            prerequisiteTree: {
                                /** @description All of these prerequisites must have been fulfilled before this course can be taken. */
                                AND?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                                /** @description At least one of these prerequisites must have been fulfilled before this course can be taken. */
                                OR?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                                /** @description None of these prerequisites must have been fulfilled before this course can be taken. */
                                NOT?: (
                                    | components["schemas"]["prereq"]
                                    | components["schemas"]["prereqTree"]
                                )[];
                            };
                            prerequisiteText: string;
                            prerequisites: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                            }[];
                            dependencies: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                            }[];
                            repeatability: string;
                            gradingOption: string;
                            concurrent: string;
                            sameAs: string;
                            restriction: string;
                            overlap: string;
                            corequisites: string;
                            geList: (
                                | "GE Ia: Lower Division Writing"
                                | "GE Ib: Upper Division Writing"
                                | "GE II: Science and Technology"
                                | "GE III: Social & Behavioral Sciences"
                                | "GE IV: Arts and Humanities"
                                | "GE Va: Quantitative Literacy"
                                | "GE Vb: Formal Reasoning"
                                | "GE VI: Language Other Than English"
                                | "GE VII: Multicultural Studies"
                                | "GE VIII: International/Global Issues"
                            )[];
                            geText: string;
                            terms: string[];
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    coursesByCursor: {
        parameters: {
            query?: {
                department?: string;
                courseNumber?: string;
                courseNumeric?: number | null;
                titleContains?: string;
                courseLevel?: "LowerDiv" | "UpperDiv" | "Graduate";
                minUnits?: number | null;
                maxUnits?: number | null;
                descriptionContains?: string;
                geCategory?:
                    | "GE-1A"
                    | "GE-1B"
                    | "GE-2"
                    | "GE-3"
                    | "GE-4"
                    | "GE-5A"
                    | "GE-5B"
                    | "GE-6"
                    | "GE-7"
                    | "GE-8";
                cursor?: string;
                take?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        data: {
                            /** @description The list of requested items */
                            items: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                                /** @example 161 */
                                courseNumeric: number;
                                /** @example Donald Bren School of Information and Computer Sciences */
                                school: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /**
                                 * @example Upper Division (100-199)
                                 * @enum {string}
                                 */
                                courseLevel:
                                    | "Lower Division (1-99)"
                                    | "Upper Division (100-199)"
                                    | "Graduate/Professional Only (200+)";
                                /** @example 4 */
                                minUnits: number;
                                /** @example 4 */
                                maxUnits: number;
                                description: string;
                                /** @example Computer Science */
                                departmentName: string;
                                instructors: {
                                    /** @example mikes */
                                    ucinetid: string;
                                    /** @example Michael Shindler */
                                    name: string;
                                    /** @example Associate Professor of Teaching */
                                    title: string;
                                    /** @example mikes@uci.edu */
                                    email: string | "";
                                    /** @example Computer Science */
                                    department: string;
                                    /** @example [
                                     *       "SHINDLER, M."
                                     *     ] */
                                    shortenedNames: string[];
                                }[];
                                prerequisiteTree: {
                                    /** @description All of these prerequisites must have been fulfilled before this course can be taken. */
                                    AND?: (
                                        | components["schemas"]["prereq"]
                                        | components["schemas"]["prereqTree"]
                                    )[];
                                    /** @description At least one of these prerequisites must have been fulfilled before this course can be taken. */
                                    OR?: (
                                        | components["schemas"]["prereq"]
                                        | components["schemas"]["prereqTree"]
                                    )[];
                                    /** @description None of these prerequisites must have been fulfilled before this course can be taken. */
                                    NOT?: (
                                        | components["schemas"]["prereq"]
                                        | components["schemas"]["prereqTree"]
                                    )[];
                                };
                                prerequisiteText: string;
                                prerequisites: {
                                    /** @example COMPSCI161 */
                                    id: string;
                                    /** @example Design and Analysis of Algorithms */
                                    title: string;
                                    /** @example COMPSCI */
                                    department: string;
                                    /** @example 161 */
                                    courseNumber: string;
                                }[];
                                dependencies: {
                                    /** @example COMPSCI161 */
                                    id: string;
                                    /** @example Design and Analysis of Algorithms */
                                    title: string;
                                    /** @example COMPSCI */
                                    department: string;
                                    /** @example 161 */
                                    courseNumber: string;
                                }[];
                                repeatability: string;
                                gradingOption: string;
                                concurrent: string;
                                sameAs: string;
                                restriction: string;
                                overlap: string;
                                corequisites: string;
                                geList: (
                                    | "GE Ia: Lower Division Writing"
                                    | "GE Ib: Upper Division Writing"
                                    | "GE II: Science and Technology"
                                    | "GE III: Social & Behavioral Sciences"
                                    | "GE IV: Arts and Humanities"
                                    | "GE Va: Quantitative Literacy"
                                    | "GE Vb: Formal Reasoning"
                                    | "GE VI: Language Other Than English"
                                    | "GE VII: Multicultural Studies"
                                    | "GE VIII: International/Global Issues"
                                )[];
                                geText: string;
                                terms: string[];
                            }[];
                            /** @description Cursor pointing to the next page. Null if there are no more results */
                            nextCursor: string | null;
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    enrollmentHistory: {
        parameters: {
            query?: {
                year?: string;
                quarter?:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                instructorName?: string;
                department?: string;
                courseNumber?: string;
                sectionCode?: string;
                sectionType?:
                    | "Act"
                    | "Col"
                    | "Dis"
                    | "Fld"
                    | "Lab"
                    | "Lec"
                    | "Qiz"
                    | "Res"
                    | "Sem"
                    | "Stu"
                    | "Tap"
                    | "Tut";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            year: string;
                            /** @enum {string} */
                            quarter:
                                | "Fall"
                                | "Winter"
                                | "Spring"
                                | "Summer1"
                                | "Summer10wk"
                                | "Summer2";
                            sectionCode: string;
                            department: string;
                            courseNumber: string;
                            /** @enum {string} */
                            sectionType:
                                | "Act"
                                | "Col"
                                | "Dis"
                                | "Fld"
                                | "Lab"
                                | "Lec"
                                | "Qiz"
                                | "Res"
                                | "Sem"
                                | "Stu"
                                | "Tap"
                                | "Tut";
                            sectionNum: string;
                            units: string;
                            instructors: string[];
                            meetings: {
                                bldg: string[];
                                days: string;
                                time: string;
                            }[];
                            finalExam: string;
                            dates: string[];
                            maxCapacityHistory: string[];
                            totalEnrolledHistory: string[];
                            waitlistHistory: string[];
                            waitlistCapHistory: string[];
                            requestedHistory: string[];
                            newOnlyReservedHistory: string[];
                            statusHistory: (
                                | ""
                                | ("OPEN" | "Waitl" | "FULL" | "NewOnly")
                            )[];
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    rawGrades: {
        parameters: {
            query?: {
                year?: string;
                quarter?:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                instructor?: string;
                department?: string;
                courseNumber?: string;
                sectionCode?: string;
                division?: ("LowerDiv" | "UpperDiv" | "Graduate") | "ANY";
                ge?:
                    | (
                          | "GE-1A"
                          | "GE-1B"
                          | "GE-2"
                          | "GE-3"
                          | "GE-4"
                          | "GE-5A"
                          | "GE-5B"
                          | "GE-6"
                          | "GE-7"
                          | "GE-8"
                      )
                    | "ANY";
                excludePNP?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            year: string;
                            /** @enum {string} */
                            quarter:
                                | "Fall"
                                | "Winter"
                                | "Spring"
                                | "Summer1"
                                | "Summer10wk"
                                | "Summer2";
                            sectionCode: string;
                            department: string;
                            courseNumber: string;
                            courseNumeric: number;
                            geCategories: (
                                | "GE-1A"
                                | "GE-1B"
                                | "GE-2"
                                | "GE-3"
                                | "GE-4"
                                | "GE-5A"
                                | "GE-5B"
                                | "GE-6"
                                | "GE-7"
                                | "GE-8"
                            )[];
                            instructors: string[];
                            gradeACount: number;
                            gradeBCount: number;
                            gradeCCount: number;
                            gradeDCount: number;
                            gradeFCount: number;
                            gradePCount: number;
                            gradeNPCount: number;
                            gradeWCount: number;
                            averageGPA: number | null;
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    gradesOptions: {
        parameters: {
            query?: {
                year?: string;
                quarter?:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                instructor?: string;
                department?: string;
                courseNumber?: string;
                sectionCode?: string;
                division?: ("LowerDiv" | "UpperDiv" | "Graduate") | "ANY";
                ge?:
                    | (
                          | "GE-1A"
                          | "GE-1B"
                          | "GE-2"
                          | "GE-3"
                          | "GE-4"
                          | "GE-5A"
                          | "GE-5B"
                          | "GE-6"
                          | "GE-7"
                          | "GE-8"
                      )
                    | "ANY";
                excludePNP?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            years: string[];
                            departments: string[];
                            sectionCodes: string[];
                            instructors: string[];
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    aggregateGrades: {
        parameters: {
            query?: {
                year?: string;
                quarter?:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                instructor?: string;
                department?: string;
                courseNumber?: string;
                sectionCode?: string;
                division?: ("LowerDiv" | "UpperDiv" | "Graduate") | "ANY";
                ge?:
                    | (
                          | "GE-1A"
                          | "GE-1B"
                          | "GE-2"
                          | "GE-3"
                          | "GE-4"
                          | "GE-5A"
                          | "GE-5B"
                          | "GE-6"
                          | "GE-7"
                          | "GE-8"
                      )
                    | "ANY";
                excludePNP?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            sectionList: {
                                year: string;
                                /** @enum {string} */
                                quarter:
                                    | "Fall"
                                    | "Winter"
                                    | "Spring"
                                    | "Summer1"
                                    | "Summer10wk"
                                    | "Summer2";
                                sectionCode: string;
                                department: string;
                                courseNumber: string;
                                courseNumeric: number;
                                geCategories: (
                                    | "GE-1A"
                                    | "GE-1B"
                                    | "GE-2"
                                    | "GE-3"
                                    | "GE-4"
                                    | "GE-5A"
                                    | "GE-5B"
                                    | "GE-6"
                                    | "GE-7"
                                    | "GE-8"
                                )[];
                                instructors: string[];
                            }[];
                            gradeDistribution: {
                                gradeACount: number;
                                gradeBCount: number;
                                gradeCCount: number;
                                gradeDCount: number;
                                gradeFCount: number;
                                gradePCount: number;
                                gradeNPCount: number;
                                gradeWCount: number;
                                averageGPA: number | null;
                            };
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    aggregateGradesByCourse: {
        parameters: {
            query?: {
                year?: string;
                quarter?:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                instructor?: string;
                department?: string;
                courseNumber?: string;
                sectionCode?: string;
                division?: ("LowerDiv" | "UpperDiv" | "Graduate") | "ANY";
                ge?:
                    | (
                          | "GE-1A"
                          | "GE-1B"
                          | "GE-2"
                          | "GE-3"
                          | "GE-4"
                          | "GE-5A"
                          | "GE-5B"
                          | "GE-6"
                          | "GE-7"
                          | "GE-8"
                      )
                    | "ANY";
                excludePNP?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            department: string;
                            courseNumber: string;
                            gradeACount: number;
                            gradeBCount: number;
                            gradeCCount: number;
                            gradeDCount: number;
                            gradeFCount: number;
                            gradePCount: number;
                            gradeNPCount: number;
                            gradeWCount: number;
                            averageGPA: number | null;
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    aggregateGradesByOffering: {
        parameters: {
            query?: {
                year?: string;
                quarter?:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                instructor?: string;
                department?: string;
                courseNumber?: string;
                sectionCode?: string;
                division?: ("LowerDiv" | "UpperDiv" | "Graduate") | "ANY";
                ge?:
                    | (
                          | "GE-1A"
                          | "GE-1B"
                          | "GE-2"
                          | "GE-3"
                          | "GE-4"
                          | "GE-5A"
                          | "GE-5B"
                          | "GE-6"
                          | "GE-7"
                          | "GE-8"
                      )
                    | "ANY";
                excludePNP?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            department: string;
                            courseNumber: string;
                            instructor: string;
                            gradeACount: number;
                            gradeBCount: number;
                            gradeCCount: number;
                            gradeDCount: number;
                            gradeFCount: number;
                            gradePCount: number;
                            gradeNPCount: number;
                            gradeWCount: number;
                            averageGPA: number | null;
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    batchInstructors: {
        parameters: {
            query: {
                ucinetids: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example mikes */
                            ucinetid: string;
                            /** @example Michael Shindler */
                            name: string;
                            /** @example Associate Professor of Teaching */
                            title: string;
                            /** @example mikes@uci.edu */
                            email: string | "";
                            /** @example Computer Science */
                            department: string;
                            /** @example [
                             *       "SHINDLER, M."
                             *     ] */
                            shortenedNames: string[];
                            courses: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                                terms: string[];
                            }[];
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    instructorById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ucinetid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example mikes */
                            ucinetid: string;
                            /** @example Michael Shindler */
                            name: string;
                            /** @example Associate Professor of Teaching */
                            title: string;
                            /** @example mikes@uci.edu */
                            email: string | "";
                            /** @example Computer Science */
                            department: string;
                            /** @example [
                             *       "SHINDLER, M."
                             *     ] */
                            shortenedNames: string[];
                            courses: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                                terms: string[];
                            }[];
                        };
                    };
                };
            };
            /** @description Instructor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    instructorsByFilters: {
        parameters: {
            query?: {
                nameContains?: string;
                titleContains?: string;
                departmentContains?: string;
                take?: number | null;
                skip?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @example mikes */
                            ucinetid: string;
                            /** @example Michael Shindler */
                            name: string;
                            /** @example Associate Professor of Teaching */
                            title: string;
                            /** @example mikes@uci.edu */
                            email: string | "";
                            /** @example Computer Science */
                            department: string;
                            /** @example [
                             *       "SHINDLER, M."
                             *     ] */
                            shortenedNames: string[];
                            courses: {
                                /** @example COMPSCI161 */
                                id: string;
                                /** @example Design and Analysis of Algorithms */
                                title: string;
                                /** @example COMPSCI */
                                department: string;
                                /** @example 161 */
                                courseNumber: string;
                                terms: string[];
                            }[];
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    instructorsByCursor: {
        parameters: {
            query?: {
                nameContains?: string;
                titleContains?: string;
                departmentContains?: string;
                cursor?: string;
                take?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        data: {
                            /** @description The list of requested items */
                            items: {
                                /** @example mikes */
                                ucinetid: string;
                                /** @example Michael Shindler */
                                name: string;
                                /** @example Associate Professor of Teaching */
                                title: string;
                                /** @example mikes@uci.edu */
                                email: string | "";
                                /** @example Computer Science */
                                department: string;
                                /** @example [
                                 *       "SHINDLER, M."
                                 *     ] */
                                shortenedNames: string[];
                                courses: {
                                    /** @example COMPSCI161 */
                                    id: string;
                                    /** @example Design and Analysis of Algorithms */
                                    title: string;
                                    /** @example COMPSCI */
                                    department: string;
                                    /** @example 161 */
                                    courseNumber: string;
                                    terms: string[];
                                }[];
                            }[];
                            /** @description Cursor pointing to the next page. Null if there are no more results */
                            nextCursor: string | null;
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /**
                         * @description The data that was requested
                         * @enum {string}
                         */
                        data: "Pong!";
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    getMajors: {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description ID of this major
                             * @example BA-014
                             */
                            id: string;
                            /**
                             * @description The human name of this major
                             * @example Computer Science
                             */
                            name: string;
                            /** @description The type of degree granted by this major */
                            type: string;
                            /** @description The division in which this major is offered */
                            division: "Undergraduate" | "Graduate";
                            /**
                             * @description The ID(s) of specialization(s) associated with this major; if any are present, one is mandatory for this major.
                             * @example [
                             *       "BS-201A",
                             *       "BS-201B",
                             *       "BS-201C",
                             *       "BS-201D",
                             *       "BS-201E",
                             *       "BS-201F",
                             *       "BS-201G",
                             *       "BS-201H",
                             *       "BS-201I"
                             *     ]
                             */
                            specializations: string[];
                        }[];
                    };
                };
            };
            /** @description Major data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    getMinors: {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description ID of this minor
                             * @example 25F
                             */
                            id: string;
                            /**
                             * @description The human name of this minor
                             * @example Minor in Bioinformatics
                             */
                            name: string;
                        }[];
                    };
                };
            };
            /** @description Minor data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    getSpecializations: {
        parameters: {
            query?: {
                majorId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description ID of this specialization
                             * @example BS-201B
                             */
                            id: string;
                            /**
                             * @description Major ID which this specialization is associated with
                             * @example BS-201
                             */
                            majorId: string;
                            /**
                             * @description The human name of this specialization
                             * @example CS:Specialization in Algorithms
                             */
                            name: string;
                        }[];
                    };
                };
            };
            /** @description Specialization data not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    majorRequirements: {
        parameters: {
            query: {
                programId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description Identifier for this program
                             * @example BS-201
                             */
                            id: string;
                            /**
                             * @description Human name for this program
                             * @example Major in Computer Science
                             */
                            name: string;
                            /** @description The set of of requirements for this program; a course, unit, or group requirement as follows: */
                            requirements: (
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Course";
                                      /** @description The number of courses from this set demanded by this requirement. */
                                      courseCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Unit";
                                      /** @description The number of units needed for this requirement. */
                                      unitCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Group";
                                      /** @description The number of sub-requirements which must be met. */
                                      requirementCount: number;
                                      /** @description The collection of sub-requirements permissible for fulfilling this requirement. */
                                      requirements: components["schemas"]["programRequirement"][];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Marker";
                                  }
                            )[];
                        };
                    };
                };
            };
            /** @description Major not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    minorRequirements: {
        parameters: {
            query: {
                programId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description Identifier for this program
                             * @example 459
                             */
                            id: string;
                            /**
                             * @description Human name for this program
                             * @example Minor in Information and Computer Science
                             */
                            name: string;
                            /** @description The set of of requirements for this program; a course, unit, or group requirement as follows: */
                            requirements: (
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Course";
                                      /** @description The number of courses from this set demanded by this requirement. */
                                      courseCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Unit";
                                      /** @description The number of units needed for this requirement. */
                                      unitCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Group";
                                      /** @description The number of sub-requirements which must be met. */
                                      requirementCount: number;
                                      /** @description The collection of sub-requirements permissible for fulfilling this requirement. */
                                      requirements: components["schemas"]["programRequirement"][];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Marker";
                                  }
                            )[];
                        };
                    };
                };
            };
            /** @description Minor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    specializationRequirements: {
        parameters: {
            query: {
                programId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description Identifier for this program
                             * @example BS-201E
                             */
                            id: string;
                            /**
                             * @description Human name for this program
                             * @example CS:Specialization in Bioinformatics
                             */
                            name: string;
                            /** @description The set of of requirements for this program; a course, unit, or group requirement as follows: */
                            requirements: (
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Course";
                                      /** @description The number of courses from this set demanded by this requirement. */
                                      courseCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Unit";
                                      /** @description The number of units needed for this requirement. */
                                      unitCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Group";
                                      /** @description The number of sub-requirements which must be met. */
                                      requirementCount: number;
                                      /** @description The collection of sub-requirements permissible for fulfilling this requirement. */
                                      requirements: components["schemas"]["programRequirement"][];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Marker";
                                  }
                            )[];
                        };
                    };
                };
            };
            /** @description Specialization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    ugradRequirements: {
        parameters: {
            query: {
                id: "UC" | "GE";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /** @description ID of the requirements block fetched */
                            id: string;
                            /** @description The requirements in this requirements block */
                            requirements: (
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Course";
                                      /** @description The number of courses from this set demanded by this requirement. */
                                      courseCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Unit";
                                      /** @description The number of units needed for this requirement. */
                                      unitCount: number;
                                      /** @description The courses permissible for fulfilling this requirement. */
                                      courses: string[];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Group";
                                      /** @description The number of sub-requirements which must be met. */
                                      requirementCount: number;
                                      /** @description The collection of sub-requirements permissible for fulfilling this requirement. */
                                      requirements: components["schemas"]["programRequirement"][];
                                  }
                                | {
                                      /** @description Human description of this requirement */
                                      label: string;
                                      /** @enum {string} */
                                      requirementType: "Marker";
                                  }
                            )[];
                        };
                    };
                };
            };
            /** @description Specialization not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    search: {
        parameters: {
            query: {
                query: string;
                take?: number | null;
                skip?: number | null;
                resultType?: "course" | "instructor";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            count: number;
                            results: (
                                | {
                                      /** @enum {string} */
                                      type: "course";
                                      result: {
                                          /** @example COMPSCI161 */
                                          id: string;
                                          /** @example COMPSCI */
                                          department: string;
                                          /** @example 161 */
                                          courseNumber: string;
                                          /** @example 161 */
                                          courseNumeric: number;
                                          /** @example Donald Bren School of Information and Computer Sciences */
                                          school: string;
                                          /** @example Design and Analysis of Algorithms */
                                          title: string;
                                          /**
                                           * @example Upper Division (100-199)
                                           * @enum {string}
                                           */
                                          courseLevel:
                                              | "Lower Division (1-99)"
                                              | "Upper Division (100-199)"
                                              | "Graduate/Professional Only (200+)";
                                          /** @example 4 */
                                          minUnits: number;
                                          /** @example 4 */
                                          maxUnits: number;
                                          description: string;
                                          /** @example Computer Science */
                                          departmentName: string;
                                          instructors: {
                                              /** @example mikes */
                                              ucinetid: string;
                                              /** @example Michael Shindler */
                                              name: string;
                                              /** @example Associate Professor of Teaching */
                                              title: string;
                                              /** @example mikes@uci.edu */
                                              email: string | "";
                                              /** @example Computer Science */
                                              department: string;
                                              /** @example [
                                               *       "SHINDLER, M."
                                               *     ] */
                                              shortenedNames: string[];
                                          }[];
                                          prerequisiteTree: {
                                              /** @description All of these prerequisites must have been fulfilled before this course can be taken. */
                                              AND?: (
                                                  | components["schemas"]["prereq"]
                                                  | components["schemas"]["prereqTree"]
                                              )[];
                                              /** @description At least one of these prerequisites must have been fulfilled before this course can be taken. */
                                              OR?: (
                                                  | components["schemas"]["prereq"]
                                                  | components["schemas"]["prereqTree"]
                                              )[];
                                              /** @description None of these prerequisites must have been fulfilled before this course can be taken. */
                                              NOT?: (
                                                  | components["schemas"]["prereq"]
                                                  | components["schemas"]["prereqTree"]
                                              )[];
                                          };
                                          prerequisiteText: string;
                                          prerequisites: {
                                              /** @example COMPSCI161 */
                                              id: string;
                                              /** @example Design and Analysis of Algorithms */
                                              title: string;
                                              /** @example COMPSCI */
                                              department: string;
                                              /** @example 161 */
                                              courseNumber: string;
                                          }[];
                                          dependencies: {
                                              /** @example COMPSCI161 */
                                              id: string;
                                              /** @example Design and Analysis of Algorithms */
                                              title: string;
                                              /** @example COMPSCI */
                                              department: string;
                                              /** @example 161 */
                                              courseNumber: string;
                                          }[];
                                          repeatability: string;
                                          gradingOption: string;
                                          concurrent: string;
                                          sameAs: string;
                                          restriction: string;
                                          overlap: string;
                                          corequisites: string;
                                          geList: (
                                              | "GE Ia: Lower Division Writing"
                                              | "GE Ib: Upper Division Writing"
                                              | "GE II: Science and Technology"
                                              | "GE III: Social & Behavioral Sciences"
                                              | "GE IV: Arts and Humanities"
                                              | "GE Va: Quantitative Literacy"
                                              | "GE Vb: Formal Reasoning"
                                              | "GE VI: Language Other Than English"
                                              | "GE VII: Multicultural Studies"
                                              | "GE VIII: International/Global Issues"
                                          )[];
                                          geText: string;
                                          terms: string[];
                                      };
                                      rank: number;
                                  }
                                | {
                                      /** @enum {string} */
                                      type: "instructor";
                                      result: {
                                          /** @example mikes */
                                          ucinetid: string;
                                          /** @example Michael Shindler */
                                          name: string;
                                          /** @example Associate Professor of Teaching */
                                          title: string;
                                          /** @example mikes@uci.edu */
                                          email: string | "";
                                          /** @example Computer Science */
                                          department: string;
                                          /** @example [
                                           *       "SHINDLER, M."
                                           *     ] */
                                          shortenedNames: string[];
                                          courses: {
                                              /** @example COMPSCI161 */
                                              id: string;
                                              /** @example Design and Analysis of Algorithms */
                                              title: string;
                                              /** @example COMPSCI */
                                              department: string;
                                              /** @example 161 */
                                              courseNumber: string;
                                              terms: string[];
                                          }[];
                                      };
                                      rank: number;
                                  }
                            )[];
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    websoc: {
        parameters: {
            query: {
                year?: string;
                quarter:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                ge?:
                    | "ANY"
                    | "GE-1A"
                    | "GE-1B"
                    | "GE-2"
                    | "GE-3"
                    | "GE-4"
                    | "GE-5A"
                    | "GE-5B"
                    | "GE-6"
                    | "GE-7"
                    | "GE-8";
                department?: string;
                courseTitle?: string;
                courseNumber?: string;
                sectionCodes?: string;
                instructorName?: string;
                days?: string;
                building?: string;
                room?: string;
                division?: ("LowerDiv" | "UpperDiv" | "Graduate") | "ANY";
                sectionType?:
                    | "ANY"
                    | (
                          | "Act"
                          | "Col"
                          | "Dis"
                          | "Fld"
                          | "Lab"
                          | "Lec"
                          | "Qiz"
                          | "Res"
                          | "Sem"
                          | "Stu"
                          | "Tap"
                          | "Tut"
                      );
                fullCourses?:
                    | "ANY"
                    | "SkipFull"
                    | "SkipFullWaitlist"
                    | "FullOnly"
                    | "Overenrolled";
                cancelledCourses?: "Exclude" | "Include" | "Only";
                units?: "VAR" | string;
                startTime?: string;
                endTime?: string;
                excludeRestrictionCodes?: string;
                includeRelatedCourses?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            schools: {
                                departments: {
                                    courses: {
                                        sections: {
                                            units: string;
                                            status:
                                                | (
                                                      | "OPEN"
                                                      | "Waitl"
                                                      | "FULL"
                                                      | "NewOnly"
                                                  )
                                                | "";
                                            meetings: (
                                                | {
                                                      /** @enum {boolean} */
                                                      timeIsTBA: true;
                                                  }
                                                | {
                                                      /** @enum {boolean} */
                                                      timeIsTBA: false;
                                                      bldg: string[];
                                                      days: string;
                                                      startTime: {
                                                          hour: number;
                                                          minute: number;
                                                      };
                                                      endTime: {
                                                          hour: number;
                                                          minute: number;
                                                      };
                                                  }
                                            )[];
                                            finalExam:
                                                | {
                                                      /** @enum {string} */
                                                      examStatus: "NO_FINAL";
                                                  }
                                                | {
                                                      /** @enum {string} */
                                                      examStatus: "TBA_FINAL";
                                                  }
                                                | {
                                                      /** @enum {string} */
                                                      examStatus: "SCHEDULED_FINAL";
                                                      dayOfWeek: string;
                                                      month: number;
                                                      day: number;
                                                      startTime: {
                                                          hour: number;
                                                          minute: number;
                                                      };
                                                      endTime: {
                                                          hour: number;
                                                          minute: number;
                                                      };
                                                      bldg: string[];
                                                  };
                                            sectionNum: string;
                                            instructors: string[];
                                            maxCapacity: string;
                                            sectionCode: string;
                                            /** @enum {string} */
                                            sectionType:
                                                | "Act"
                                                | "Col"
                                                | "Dis"
                                                | "Fld"
                                                | "Lab"
                                                | "Lec"
                                                | "Qiz"
                                                | "Res"
                                                | "Sem"
                                                | "Stu"
                                                | "Tap"
                                                | "Tut";
                                            numRequested: string;
                                            restrictions: string;
                                            numOnWaitlist: string;
                                            numWaitlistCap: string;
                                            sectionComment: string;
                                            numNewOnlyReserved: string;
                                            numCurrentlyEnrolled: {
                                                totalEnrolled: string;
                                                sectionEnrolled: string;
                                            };
                                            updatedAt: string | null;
                                            webURL: string;
                                        }[];
                                        deptCode: string;
                                        courseTitle: string;
                                        courseNumber: string;
                                        courseComment: string;
                                        prerequisiteLink: string;
                                        updatedAt: string | null;
                                    }[];
                                    deptCode: string;
                                    deptName: string;
                                    deptComment: string;
                                    sectionCodeRangeComments: string[];
                                    courseNumberRangeComments: string[];
                                    updatedAt: string | null;
                                }[];
                                schoolName: string;
                                schoolComment: string;
                                updatedAt: string | null;
                            }[];
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    websocTerms: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            shortName: string;
                            longName: string;
                        }[];
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    week: {
        parameters: {
            query?: {
                year?: string;
                month?: number;
                day?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            /**
                             * @description What week it is for each quarter that is in session, corresponding to the 'quarters' array.
                             * @example [
                             *       1
                             *     ]
                             */
                            weeks: number[] | number[];
                            /**
                             * @description The quarter(s) that is/are currently in session.
                             * @example [
                             *       "Fall Quarter 2024"
                             *     ]
                             */
                            quarters: string[] | string[];
                            /** @example Week 1 • Fall Quarter 2024 */
                            display: string;
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    studyRoomById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            id: string;
                            name: string;
                            capacity: number;
                            location: string;
                            description?: string;
                            directions?: string;
                            techEnhanced: boolean;
                            slots: {
                                studyRoomId: string;
                                /**
                                 * Format: date-time
                                 * @example 2021-01-06T08:00:00-08:00
                                 */
                                start: string;
                                /**
                                 * Format: date-time
                                 * @example 2021-01-06T08:30:00-08:00
                                 */
                                end: string;
                                isAvailable: boolean;
                            }[];
                        };
                    };
                };
            };
            /** @description Study room not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    studyRoomsByFilters: {
        parameters: {
            query?: {
                location?: string;
                capacityMin?: number | null;
                capacityMax?: number | null;
                isTechEnhanced?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            id: string;
                            name: string;
                            capacity: number;
                            location: string;
                            description?: string;
                            directions?: string;
                            techEnhanced: boolean;
                            slots: {
                                studyRoomId: string;
                                /**
                                 * Format: date-time
                                 * @example 2021-01-06T08:00:00-08:00
                                 */
                                start: string;
                                /**
                                 * Format: date-time
                                 * @example 2021-01-06T08:30:00-08:00
                                 */
                                end: string;
                                isAvailable: boolean;
                            }[];
                        }[];
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
    larc: {
        parameters: {
            query: {
                instructorName?: string;
                building?: string;
                department?: string;
                courseNumber?: string;
                year?: string;
                quarter:
                    | "Fall"
                    | "Winter"
                    | "Spring"
                    | "Summer1"
                    | "Summer10wk"
                    | "Summer2";
                days?: string;
                startTime?: string;
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: true;
                        /** @description The data that was requested */
                        data: {
                            courses: {
                                /** @example I&C SCI */
                                deptCode: string;
                                /** @example DATA STRC IMPL&ANLS */
                                courseTitle: string;
                                /** @example 46 */
                                courseNumber: string;
                                sections: {
                                    meetings: {
                                        bldg: string[];
                                        /** @example MWF */
                                        days: string;
                                        startTime:
                                            | {
                                                  /** @example 11 */
                                                  hour: number;
                                                  /** @example 50 */
                                                  minute: number;
                                              }
                                            | unknown
                                            | unknown;
                                        endTime:
                                            | {
                                                  /** @example 11 */
                                                  hour: number;
                                                  /** @example 50 */
                                                  minute: number;
                                              }
                                            | unknown
                                            | unknown;
                                    }[];
                                    instructors: string[];
                                }[];
                            }[];
                        };
                    };
                };
            };
            /** @description Parameters failed validation */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
            /** @description Server error occurred */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {boolean} */
                        ok: false;
                        /** @description Details on why the request may have failed */
                        message: string;
                    };
                };
            };
        };
    };
}
