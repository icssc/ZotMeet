generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native"]
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Do not modify anything above this line unless you know what you are doing.

model User {
  id String @id @unique @default(cuid())

  email                       String                        @unique
  firstName                   String
  lastName                    String
  verified                    Boolean                       @default(false)
  receiveEmail                Boolean                       @default(true)
  token                       String?                       @unique
  created_at                  DateTime?
  groups                      Group[]
  meetings                    Meeting[]
  generalAvailability         Availability?                 @relation(fields: [availabilityId], references: [id])
  availabilityId              String?
  MeetingSpecificAvailability MeetingSpecificAvailability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth_session Session[]
  key          Key[]
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Meeting {
  id          String   @id @unique @default(uuid())
  title       String
  description String?
  date        DateTime
  location    String?
  Invitees    User[]
  host_id     String
  group       Group?   @relation(fields: [groupId], references: [id])
  from_time   DateTime
  to_time     DateTime
  groupId     String?
}

model Group {
  id          String    @id @unique @default(uuid())
  name        String
  description String?
  created_at  DateTime?
  members     User[]
  Meeting     Meeting[]
}

model MeetingSpecificAvailability {
  id           String         @id @unique @default(uuid())
  user_id      String?
  meeting_id   String?
  date         DateTime?
  startTime    DateTime?
  endTime      DateTime?
  user         User?          @relation(fields: [userId], references: [id])
  Availability Availability[]
  userId       String?
}

model Availability {
  id                            String                       @id @unique @default(cuid())
  from_time                     String
  to_time                       String
  from_date                     String
  to_date                       String
  User                          User[]
  MeetingSpecificAvailability   MeetingSpecificAvailability? @relation(fields: [meetingSpecificAvailabilityId], references: [id])
  meetingSpecificAvailabilityId String?
}
